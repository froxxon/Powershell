Clear-Host
$DHCPServer = "" # <- Put DHCP Server here and share here (ex. \\DCHPServeralias\D$)
$Headers = "ID","Date","Time","Description","IP Address","Host Name","MAC Address","User Name"," TransactionID"," QResult","Probationtime"," CorrelationID","Dhcid","VendorClass(Hex)","VendorClass(ASCII)","UserClass(Hex)","UserClass(ASCII)","RelayAgentInformation","DnsRegError"
$LogFile = "\\$DHCPServer\dhcp\logs\$($(Get-ChildItem "\\$DHCPServer\dhcp\logs" -Exclude *V6*.log | Sort LastWriteTime -Descending)[0].Name)"
Write-Host " - Opening logfile: $LogFile"
$LogContent = Get-content $LogFile -tail 5000 | ConvertFrom-Csv -Delim ',' -Header $Headers

ForEach ( $Line in $LogContent ) {
    If ($Line.'DNSRegError' -eq "0") { $Line.'DNSRegError' = "" }
    If ($Line.'DNSRegError' -eq "2") { $Line.'DNSRegError' = "Access denied (2)" }
    If ($Line.'DNSRegError' -eq "9001") { $Line.'DNSRegError' = "DNS server unable to interpret format (9001)" }
    If ($Line.'DNSRegError' -eq "9002") { $Line.'DNSRegError' = "DNS server failure (9002)" }
    If ($Line.'DNSRegError' -eq "9003") { $Line.'DNSRegError' = "DNS name does not exist (9003)" }
    If ($Line.'DNSRegError' -eq "9004") { $Line.'DNSRegError' = "DNS request not supported by name server (9004)" }
    If ($Line.'DNSRegError' -eq "9005") { $Line.'DNSRegError' = "DNS operation refused (9005)" }
    If ($Line.'DNSRegError' -eq "9006") { $Line.'DNSRegError' = "DNS name that ought not exist, does exist (9006)" }
    If ($Line.'DNSRegError' -eq "9007") { $Line.'DNSRegError' = "DNS RR set that ought not exist, does exist (9007)" }
    If ($Line.'DNSRegError' -eq "9008") { $Line.'DNSRegError' = "DNS RR set that ought to exist, does not exist (9008)" }
    If ($Line.'DNSRegError' -eq "9009") { $Line.'DNSRegError' = "DNS server not authoritative for zone (9009)" }
    If ($Line.'DNSRegError' -eq "9010") { $Line.'DNSRegError' = "DNS name in update or prereq is not in zone (9010)" }
    If ($Line.'DNSRegError' -eq "9016") { $Line.'DNSRegError' = "DNS signature failed to verify (9016)" }
    If ($Line.'DNSRegError' -eq "9017") { $Line.'DNSRegError' = "DNS bad key (9017)" }
    If ($Line.'DNSRegError' -eq "9018") { $Line.'DNSRegError' = "DNS signature validity expired (9018)" }
    If ($Line.'DNSRegError' -eq "9101") { $Line.'DNSRegError' = "Only the DNS server acting as the key master for the zone may perform this operation (9101)" }
    If ($Line.'DNSRegError' -eq "9102") { $Line.'DNSRegError' = "This operation is not allowed on a zone that is signed or has signing keys (9102)" }
    If ($Line.'DNSRegError' -eq "9103") { $Line.'DNSRegError' = "NSEC3 is not compatible with the RSA-SHA-1 algorithm Choose a different algorithm or use NSEC (9103)" }
    If ($Line.'DNSRegError' -eq "9104") { $Line.'DNSRegError' = "The zone does not have enough signing keys There must be at least one key signing key (KSK) and at least one zone signing key (ZSK) (9104)" }
    If ($Line.'DNSRegError' -eq "9105") { $Line.'DNSRegError' = "The specified algorithm is not supported (9105)" }
    If ($Line.'DNSRegError' -eq "9106") { $Line.'DNSRegError' = "The specified key size is not supported (9106)" }
    If ($Line.'DNSRegError' -eq "9107") { $Line.'DNSRegError' = "One or more of the signing keys for a zone are not accessible to the DNS server Zone signing will not be operational until this error is resolved (9107)" }
    If ($Line.'DNSRegError' -eq "9108") { $Line.'DNSRegError' = "The specified key storage provider does not support DPAPI++ data protection Zone signing will not be operational until this error is resolved (9108)" }
    If ($Line.'DNSRegError' -eq "9109") { $Line.'DNSRegError' = "An unexpected DPAPI++ error was encountered Zone signing will not be operational until this error is resolved (9109)" }
    If ($Line.'DNSRegError' -eq "9110") { $Line.'DNSRegError' = "An unexpected crypto error was encountered Zone signing may not be operational until this error is resolved (9110)" }
    If ($Line.'DNSRegError' -eq "9111") { $Line.'DNSRegError' = "The DNS server encountered a signing key with an unknown version Zone signing will not be operational until this error is resolved (9111)" }
    If ($Line.'DNSRegError' -eq "9112") { $Line.'DNSRegError' = "The specified key service provider cannot be opened by the DNS server (9112)" }
    If ($Line.'DNSRegError' -eq "9113") { $Line.'DNSRegError' = "The DNS server cannot accept any more signing keys with the specified algorithm and KSK flag value for this zone (9113)" }
    If ($Line.'DNSRegError' -eq "9114") { $Line.'DNSRegError' = "The specified rollover period is invalid (9114)" }
    If ($Line.'DNSRegError' -eq "9115") { $Line.'DNSRegError' = "The specified initial rollover offset is invalid (9115)" }
    If ($Line.'DNSRegError' -eq "9116") { $Line.'DNSRegError' = "The specified signing key is already in process of rolling over keys (9116)" }
    If ($Line.'DNSRegError' -eq "9117") { $Line.'DNSRegError' = "The specified signing key does not have a standby key to revoke (9117)" }
    If ($Line.'DNSRegError' -eq "9118") { $Line.'DNSRegError' = "This operation is not allowed on a zone signing key (ZSK) (9118)" }
    If ($Line.'DNSRegError' -eq "9119") { $Line.'DNSRegError' = "This operation is not allowed on an active signing key (9119)" }
    If ($Line.'DNSRegError' -eq "9120") { $Line.'DNSRegError' = "The specified signing key is already queued for rollover (9120)" }
    If ($Line.'DNSRegError' -eq "9121") { $Line.'DNSRegError' = "This operation is not allowed on an unsigned zone (9121)" }
    If ($Line.'DNSRegError' -eq "9122") { $Line.'DNSRegError' = "This operation could not be completed because the DNS server listed as the current key master for this zone is down or misconfigured Resolve the problem on the current key master for this zone or use another DNS server to seize the key master role (9122)" }
    If ($Line.'DNSRegError' -eq "9123") { $Line.'DNSRegError' = "The specified signature validity period is invalid (9123)" }
    If ($Line.'DNSRegError' -eq "9124") { $Line.'DNSRegError' = "The specified NSEC3 iteration count is higher than allowed by the minimum key length used in the zone (9124)" }
    If ($Line.'DNSRegError' -eq "9125") { $Line.'DNSRegError' = "This operation could not be completed because the DNS server has been configured with DNSSEC features disabled Enable DNSSEC on the DNS server (9125)" }
    If ($Line.'DNSRegError' -eq "9126") { $Line.'DNSRegError' = "This operation could not be completed because the XML stream received is empty or syntactically invalid (9126)" }
    If ($Line.'DNSRegError' -eq "9127") { $Line.'DNSRegError' = "This operation completed, but no trust anchors were added because all of the trust anchors received were either invalid, unsupported, expired, or would not become valid in less than 30 days (9127)" }
    If ($Line.'DNSRegError' -eq "9128") { $Line.'DNSRegError' = "The specified signing key is not waiting for parental DS update (9128)" }
    If ($Line.'DNSRegError' -eq "9129") { $Line.'DNSRegError' = "Hash collision detected during NSEC3 signing Specify a different user-provided salt, or use a randomly generated salt, and attempt to sign the zone again (9129)" }
    If ($Line.'DNSRegError' -eq "9130") { $Line.'DNSRegError' = "NSEC is not compatible with the NSEC3-RSA-SHA-1 algorithm Choose a different algorithm or use NSEC3 (9130)" }
    If ($Line.'DNSRegError' -eq "9501") { $Line.'DNSRegError' = "No records found for given DNS query (9501)" }
    If ($Line.'DNSRegError' -eq "9502") { $Line.'DNSRegError' = "Bad DNS packet (9502)" }
    If ($Line.'DNSRegError' -eq "9503") { $Line.'DNSRegError' = "No DNS packet (9503)" }
    If ($Line.'DNSRegError' -eq "9504") { $Line.'DNSRegError' = "DNS error, check rcode (9504)" }
    If ($Line.'DNSRegError' -eq "9505") { $Line.'DNSRegError' = "Unsecured DNS packet (9505)" }
    If ($Line.'DNSRegError' -eq "9506") { $Line.'DNSRegError' = "DNS query request is pending (9506)" }
    If ($Line.'DNSRegError' -eq "9551") { $Line.'DNSRegError' = "Invalid DNS type (9551)" }
    If ($Line.'DNSRegError' -eq "9552") { $Line.'DNSRegError' = "Invalid IP address (9552)" }
    If ($Line.'DNSRegError' -eq "9553") { $Line.'DNSRegError' = "Invalid property (9553)" }
    If ($Line.'DNSRegError' -eq "9554") { $Line.'DNSRegError' = "Try DNS operation again later (9554)" }
    If ($Line.'DNSRegError' -eq "9555") { $Line.'DNSRegError' = "Record for given name and type is not unique (9555)" }
    If ($Line.'DNSRegError' -eq "9556") { $Line.'DNSRegError' = "DNS name does not comply with RFC specifications (9556)" }
    If ($Line.'DNSRegError' -eq "9557") { $Line.'DNSRegError' = "DNS name is a fully-qualified DNS name (9557)" }
    If ($Line.'DNSRegError' -eq "9558") { $Line.'DNSRegError' = "DNS name is dotted (multi-label) (9558)" }
    If ($Line.'DNSRegError' -eq "9559") { $Line.'DNSRegError' = "DNS name is a single-part name (9559)" }
    If ($Line.'DNSRegError' -eq "9560") { $Line.'DNSRegError' = "DNS name contains an invalid character (9560)" }
    If ($Line.'DNSRegError' -eq "9561") { $Line.'DNSRegError' = "DNS name is entirely numeric (9561)" }
    If ($Line.'DNSRegError' -eq "9562") { $Line.'DNSRegError' = "The operation requested is not permitted on a DNS root server (9562)" }
    If ($Line.'DNSRegError' -eq "9563") { $Line.'DNSRegError' = "The record could not be created because this part of the DNS namespace has been delegated to another server (9563)" }
    If ($Line.'DNSRegError' -eq "9564") { $Line.'DNSRegError' = "The DNS server could not find a set of root hints (9564)" }
    If ($Line.'DNSRegError' -eq "9565") { $Line.'DNSRegError' = "The DNS server found root hints but they were not consistent across all adapters (9565)" }
    If ($Line.'DNSRegError' -eq "9566") { $Line.'DNSRegError' = "The specified value is too small for this parameter (9566)" }
    If ($Line.'DNSRegError' -eq "9567") { $Line.'DNSRegError' = "The specified value is too large for this parameter (9567)" }
    If ($Line.'DNSRegError' -eq "9568") { $Line.'DNSRegError' = "This operation is not allowed while the DNS server is loading zones in the background Please try again later (9568)" }
    If ($Line.'DNSRegError' -eq "9569") { $Line.'DNSRegError' = "The operation requested is not permitted on against a DNS server running on a read-only DC (9569)" }
    If ($Line.'DNSRegError' -eq "9570") { $Line.'DNSRegError' = "No data is allowed to exist underneath a DNAME record (9570)" }
    If ($Line.'DNSRegError' -eq "9571") { $Line.'DNSRegError' = "This operation requires credentials delegation (9571)" }
    If ($Line.'DNSRegError' -eq "9572") { $Line.'DNSRegError' = "Name resolution policy table has been corrupted DNS resolution will fail until it is fixed Contact your network administrator (9572)" }
    If ($Line.'DNSRegError' -eq "9601") { $Line.'DNSRegError' = "DNS zone does not exist (9601)" }
    If ($Line.'DNSRegError' -eq "9602") { $Line.'DNSRegError' = "DNS zone information not available (9602)" }
    If ($Line.'DNSRegError' -eq "9603") { $Line.'DNSRegError' = "Invalid operation for DNS zone (9603)" }
    If ($Line.'DNSRegError' -eq "9604") { $Line.'DNSRegError' = "Invalid DNS zone configuration (9604)" }
    If ($Line.'DNSRegError' -eq "9605") { $Line.'DNSRegError' = "DNS zone has no start of authority (SOA) record (9605)" }
    If ($Line.'DNSRegError' -eq "9606") { $Line.'DNSRegError' = "DNS zone has no Name Server (NS) record (9606)" }
    If ($Line.'DNSRegError' -eq "9607") { $Line.'DNSRegError' = "DNS zone is locked (9607)" }
    If ($Line.'DNSRegError' -eq "9608") { $Line.'DNSRegError' = "DNS zone creation failed (9608)" }
    If ($Line.'DNSRegError' -eq "9609") { $Line.'DNSRegError' = "DNS zone already exists (9609)" }
    If ($Line.'DNSRegError' -eq "9610") { $Line.'DNSRegError' = "DNS automatic zone already exists (9610)" }
    If ($Line.'DNSRegError' -eq "9611") { $Line.'DNSRegError' = "Invalid DNS zone type (9611)" }
    If ($Line.'DNSRegError' -eq "9612") { $Line.'DNSRegError' = "Secondary DNS zone requires master IP address (9612)" }
    If ($Line.'DNSRegError' -eq "9613") { $Line.'DNSRegError' = "DNS zone not secondary (9613)" }
    If ($Line.'DNSRegError' -eq "9614") { $Line.'DNSRegError' = "Need secondary IP address (9614)" }
    If ($Line.'DNSRegError' -eq "9615") { $Line.'DNSRegError' = "WINS initialization failed (9615)" }
    If ($Line.'DNSRegError' -eq "9616") { $Line.'DNSRegError' = "Need WINS servers (9616)" }
    If ($Line.'DNSRegError' -eq "9617") { $Line.'DNSRegError' = "NBTSTAT initialization call failed (9617)" }
    If ($Line.'DNSRegError' -eq "9618") { $Line.'DNSRegError' = "Invalid delete of start of authority (SOA) (9618)" }
    If ($Line.'DNSRegError' -eq "9619") { $Line.'DNSRegError' = "A conditional forwarding zone already exists for that name (9619)" }
    If ($Line.'DNSRegError' -eq "9620") { $Line.'DNSRegError' = "This zone must be configured with one or more master DNS server IP addresses (9620)" }
    If ($Line.'DNSRegError' -eq "9621") { $Line.'DNSRegError' = "The operation cannot be performed because this zone is shut down (9621)" }
    If ($Line.'DNSRegError' -eq "9622") { $Line.'DNSRegError' = "This operation cannot be performed because the zone is currently being signed Please try again later (9622)" }
    If ($Line.'DNSRegError' -eq "9651") { $Line.'DNSRegError' = "Primary DNS zone requires datafile (9651)" }
    If ($Line.'DNSRegError' -eq "9652") { $Line.'DNSRegError' = "Invalid datafile name for DNS zone (9652)" }
    If ($Line.'DNSRegError' -eq "9653") { $Line.'DNSRegError' = "Failed to open datafile for DNS zone (9653)" }
    If ($Line.'DNSRegError' -eq "9654") { $Line.'DNSRegError' = "Failed to write datafile for DNS zone (9654)" }
    If ($Line.'DNSRegError' -eq "9655") { $Line.'DNSRegError' = "Failure while reading datafile for DNS zone (9655)" }
    If ($Line.'DNSRegError' -eq "9701") { $Line.'DNSRegError' = "DNS record does not exist (9701)" }
    If ($Line.'DNSRegError' -eq "9702") { $Line.'DNSRegError' = "DNS record format error (9702)" }
    If ($Line.'DNSRegError' -eq "9703") { $Line.'DNSRegError' = "Node creation failure in DNS (9703)" }
    If ($Line.'DNSRegError' -eq "9704") { $Line.'DNSRegError' = "Unknown DNS record type (9704)" }
    If ($Line.'DNSRegError' -eq "9705") { $Line.'DNSRegError' = "DNS record timed out (9705)" }
    If ($Line.'DNSRegError' -eq "9706") { $Line.'DNSRegError' = "Name not in DNS zone (9706)" }
    If ($Line.'DNSRegError' -eq "9707") { $Line.'DNSRegError' = "CNAME loop detected (9707)" }
    If ($Line.'DNSRegError' -eq "9708") { $Line.'DNSRegError' = "Node is a CNAME DNS record (9708)" }
    If ($Line.'DNSRegError' -eq "9709") { $Line.'DNSRegError' = "A CNAME record already exists for given name (9709)" }
    If ($Line.'DNSRegError' -eq "9710") { $Line.'DNSRegError' = "Record only at DNS zone root (9710)" }
    If ($Line.'DNSRegError' -eq "9711") { $Line.'DNSRegError' = "DNS record already exists (9711)" }
    If ($Line.'DNSRegError' -eq "9712") { $Line.'DNSRegError' = "Secondary DNS zone data error (9712)" }
    If ($Line.'DNSRegError' -eq "9713") { $Line.'DNSRegError' = "Could not create DNS cache data (9713)" }
    If ($Line.'DNSRegError' -eq "9714") { $Line.'DNSRegError' = "DNS name does not exist (9714)" }
    If ($Line.'DNSRegError' -eq "9715") { $Line.'DNSRegError' = "Could not create pointer (PTR) record (9715)" }
    If ($Line.'DNSRegError' -eq "9716") { $Line.'DNSRegError' = "DNS domain was undeleted (9716)" }
    If ($Line.'DNSRegError' -eq "9717") { $Line.'DNSRegError' = "The directory service is unavailable (9717)" }
    If ($Line.'DNSRegError' -eq "9718") { $Line.'DNSRegError' = "DNS zone already exists in the directory service (9718)" }
    If ($Line.'DNSRegError' -eq "9719") { $Line.'DNSRegError' = "DNS server not creating or reading the boot file for the directory service integrated DNS zone (9719)" }
    If ($Line.'DNSRegError' -eq "9720") { $Line.'DNSRegError' = "Node is a DNAME DNS record (9720)" }
    If ($Line.'DNSRegError' -eq "9721") { $Line.'DNSRegError' = "A DNAME record already exists for given name (9721)" }
    If ($Line.'DNSRegError' -eq "9722") { $Line.'DNSRegError' = "An alias loop has been detected with either CNAME or DNAME records (9722)" }
    If ($Line.'DNSRegError' -eq "9751") { $Line.'DNSRegError' = "DNS AXFR (zone transfer) complete (9751)" }
    If ($Line.'DNSRegError' -eq "9752") { $Line.'DNSRegError' = "DNS zone transfer failed (9752)" }
    If ($Line.'DNSRegError' -eq "9753") { $Line.'DNSRegError' = "Added local WINS server (9753)" }
    If ($Line.'DNSRegError' -eq "9801") { $Line.'DNSRegError' = "Secure update call needs to continue update request (9801)" }
    If ($Line.'DNSRegError' -eq "9851") { $Line.'DNSRegError' = "TCP/IP network protocol not installed (9851)" }
    If ($Line.'DNSRegError' -eq "9852") { $Line.'DNSRegError' = "No DNS servers configured for local system (9852)" }
    If ($Line.'DNSRegError' -eq "9901") { $Line.'DNSRegError' = "The specified directory partition does not exist (9901)" }
    If ($Line.'DNSRegError' -eq "9902") { $Line.'DNSRegError' = "The specified directory partition already exists (9902)" }
    If ($Line.'DNSRegError' -eq "9903") { $Line.'DNSRegError' = "This DNS server is not enlisted in the specified directory partition (9903)" }
    If ($Line.'DNSRegError' -eq "9904") { $Line.'DNSRegError' = "This DNS server is already enlisted in the specified directory partition (9904)" }
    If ($Line.'DNSRegError' -eq "9905") { $Line.'DNSRegError' = "The directory partition is not available at this time Please wait a few minutes and try again (9905)" }
    If ($Line.'DNSRegError' -eq "9906") { $Line.'DNSRegError' = "The operation failed because the domain naming master FSMO role could not be reached The domain controller holding the domain naming master FSMO role is down or unable to service the request or is not running Windows Server 2003 or later (9906)" }
    If ($Line.'DNSRegError' -eq "10004") { $Line.'DNSRegError' = "A blocking operation was interrupted by a call to WSACancelBlockingCall (10004)" }
    If ($Line.'DNSRegError' -eq "10009") { $Line.'DNSRegError' = "The file handle supplied is not valid (10009)" }
    If ($Line.'DNSRegError' -eq "10013") { $Line.'DNSRegError' = "An attempt was made to access a socket in a way forbidden by its access permissions (10013)" }
    If ($Line.'DNSRegError' -eq "10014") { $Line.'DNSRegError' = "The system detected an invalid pointer address in attempting to use a pointer argument in a call (10014)" }
    If ($Line.'DNSRegError' -eq "10022") { $Line.'DNSRegError' = "An invalid argument was supplied (10022)" }
    If ($Line.'DNSRegError' -eq "10024") { $Line.'DNSRegError' = "Too many open sockets (10024)" }
    If ($Line.'DNSRegError' -eq "10035") { $Line.'DNSRegError' = "A non-blocking socket operation could not be completed immediately (10035)" }
    If ($Line.'DNSRegError' -eq "10036") { $Line.'DNSRegError' = "A blocking operation is currently executing (10036)" }
    If ($Line.'DNSRegError' -eq "10037") { $Line.'DNSRegError' = "An operation was attempted on a non-blocking socket that already had an operation in progress (10037)" }
    If ($Line.'DNSRegError' -eq "10038") { $Line.'DNSRegError' = "An operation was attempted on something that is not a socket (10038)" }
    If ($Line.'DNSRegError' -eq "10039") { $Line.'DNSRegError' = "A required address was omitted from an operation on a socket (10039)" }
    If ($Line.'DNSRegError' -eq "10040") { $Line.'DNSRegError' = "A message sent on a datagram socket was larger than the internal message buffer or some other network limit, or the buffer used to receive a datagram into was smaller than the datagram itself (10040)" }
    If ($Line.'DNSRegError' -eq "10041") { $Line.'DNSRegError' = "A protocol was specified in the socket function call that does not support the semantics of the socket type requested (10041)" }
    If ($Line.'DNSRegError' -eq "10042") { $Line.'DNSRegError' = "An unknown, invalid, or unsupported option or level was specified in a getsockopt or setsockopt call (10042)" }
    If ($Line.'DNSRegError' -eq "10043") { $Line.'DNSRegError' = "The requested protocol has not been configured into the system, or no implementation for it exists (10043)" }
    If ($Line.'DNSRegError' -eq "10044") { $Line.'DNSRegError' = "The support for the specified socket type does not exist in this address family (10044)" }
    If ($Line.'DNSRegError' -eq "10045") { $Line.'DNSRegError' = "The attempted operation is not supported for the type of object referenced (10045)" }
    If ($Line.'DNSRegError' -eq "10046") { $Line.'DNSRegError' = "The protocol family has not been configured into the system or no implementation for it exists (10046)" }
    If ($Line.'DNSRegError' -eq "10047") { $Line.'DNSRegError' = "An address incompatible with the requested protocol was used (10047)" }
    If ($Line.'DNSRegError' -eq "10048") { $Line.'DNSRegError' = "Only one usage of each socket address (protocol/network address/port) is normally permitted (10048)" }
    If ($Line.'DNSRegError' -eq "10049") { $Line.'DNSRegError' = "The requested address is not valid in its context (10049)" }
    If ($Line.'DNSRegError' -eq "10050") { $Line.'DNSRegError' = "A socket operation encountered a dead network (10050)" }
    If ($Line.'DNSRegError' -eq "10051") { $Line.'DNSRegError' = "A socket operation was attempted to an unreachable network (10051)" }
    If ($Line.'DNSRegError' -eq "10052") { $Line.'DNSRegError' = "The connection has been broken due to keep-alive activity detecting a failure while the operation was in progress (10052)" }
    If ($Line.'DNSRegError' -eq "10053") { $Line.'DNSRegError' = "An established connection was aborted by the software in your host machine (10053)" }
    If ($Line.'DNSRegError' -eq "10054") { $Line.'DNSRegError' = "An existing connection was forcibly closed by the remote host (10054)" }
    If ($Line.'DNSRegError' -eq "10055") { $Line.'DNSRegError' = "An operation on a socket could not be performed because the system lacked sufficient buffer space or because a queue was full (10055)" }
    If ($Line.'DNSRegError' -eq "10056") { $Line.'DNSRegError' = "A connect request was made on an already connected socket (10056)" }
    If ($Line.'DNSRegError' -eq "10057") { $Line.'DNSRegError' = "A request to send or receive data was disallowed because the socket is not connected and (when sending on a datagram socket using a sendto call) no address was supplied (10057)" }
    If ($Line.'DNSRegError' -eq "10058") { $Line.'DNSRegError' = "A request to send or receive data was disallowed because the socket had already been shut down in that direction with a previous shutdown call (10058)" }
    If ($Line.'DNSRegError' -eq "10059") { $Line.'DNSRegError' = "Too many references to some kernel object (10059)" }
    If ($Line.'DNSRegError' -eq "10060") { $Line.'DNSRegError' = "A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond (10060)" }
    If ($Line.'DNSRegError' -eq "10061") { $Line.'DNSRegError' = "No connection could be made because the target machine actively refused it (10061)" }
    If ($Line.'DNSRegError' -eq "10062") { $Line.'DNSRegError' = "Cannot translate name (10062)" }
    If ($Line.'DNSRegError' -eq "10063") { $Line.'DNSRegError' = "Name component or name was too long (10063)" }
    If ($Line.'DNSRegError' -eq "10064") { $Line.'DNSRegError' = "A socket operation failed because the destination host was down (10064)" }
    If ($Line.'DNSRegError' -eq "10065") { $Line.'DNSRegError' = "A socket operation was attempted to an unreachable host (10065)" }
    If ($Line.'DNSRegError' -eq "10066") { $Line.'DNSRegError' = "Cannot remove a directory that is not empty (10066)" }
    If ($Line.'DNSRegError' -eq "10067") { $Line.'DNSRegError' = "A Windows Sockets implementation may have a limit on the number of applications that may use it simultaneously (10067)" }
    If ($Line.'DNSRegError' -eq "10068") { $Line.'DNSRegError' = "Ran out of quota (10068)" }
    If ($Line.'DNSRegError' -eq "10069") { $Line.'DNSRegError' = "Ran out of disk quota (10069)" }
    If ($Line.'DNSRegError' -eq "10070") { $Line.'DNSRegError' = "File handle reference is no longer available (10070)" }
    If ($Line.'DNSRegError' -eq "10071") { $Line.'DNSRegError' = "Item is not available locally (10071)" }
    If ($Line.'DNSRegError' -eq "10091") { $Line.'DNSRegError' = "WSAStartup cannot function at this time because the underlying system it uses to provide network services is currently unavailable (10091)" }
    If ($Line.'DNSRegError' -eq "10092") { $Line.'DNSRegError' = "The Windows Sockets version requested is not supported (10092)" }
    If ($Line.'DNSRegError' -eq "10093") { $Line.'DNSRegError' = "Either the application has not called WSAStartup, or WSAStartup failed (10093)" }
    If ($Line.'DNSRegError' -eq "10101") { $Line.'DNSRegError' = "Returned by WSARecv or WSARecvFrom to indicate the remote party has initiated a graceful shutdown sequence (10101)" }
    If ($Line.'DNSRegError' -eq "10102") { $Line.'DNSRegError' = "No more results can be returned by WSALookupServiceNext (10102)" }
    If ($Line.'DNSRegError' -eq "10103") { $Line.'DNSRegError' = "A call to WSALookupServiceEnd was made while this call was still processing The call has been canceled (10103)" }
    If ($Line.'DNSRegError' -eq "10104") { $Line.'DNSRegError' = "The procedure call table is invalid (10104)" }
    If ($Line.'DNSRegError' -eq "10105") { $Line.'DNSRegError' = "The requested service provider is invalid (10105)" }
    If ($Line.'DNSRegError' -eq "10106") { $Line.'DNSRegError' = "The requested service provider could not be loaded or initialized (10106)" }
    If ($Line.'DNSRegError' -eq "10107") { $Line.'DNSRegError' = "A system call has failed (10107)" }
    If ($Line.'DNSRegError' -eq "10108") { $Line.'DNSRegError' = "No such service is known The service cannot be found in the specified name space (10108)" }
    If ($Line.'DNSRegError' -eq "10109") { $Line.'DNSRegError' = "The specified class was not found (10109)" }
    If ($Line.'DNSRegError' -eq "10110") { $Line.'DNSRegError' = "No more results can be returned by WSALookupServiceNext (10110)" }
    If ($Line.'DNSRegError' -eq "10111") { $Line.'DNSRegError' = "A call to WSALookupServiceEnd was made while this call was still processing The call has been canceled (10111)" }
    If ($Line.'DNSRegError' -eq "10112") { $Line.'DNSRegError' = "A database query failed because it was actively refused (10112)" }
    If ($Line.'DNSRegError' -eq "11001") { $Line.'DNSRegError' = "No such host is known (11001)" }
    If ($Line.'DNSRegError' -eq "11002") { $Line.'DNSRegError' = "This is usually a temporary error during hostname resolution and means that the local server did not receive a response from an authoritative server (11002)" }
    If ($Line.'DNSRegError' -eq "11003") { $Line.'DNSRegError' = "A non-recoverable error occurred during a database lookup (11003)" }
    If ($Line.'DNSRegError' -eq "11004") { $Line.'DNSRegError' = "The requested name is valid, but no data of the requested type was found (11004)" }
    If ($Line.'DNSRegError' -eq "11005") { $Line.'DNSRegError' = "At least one reserve has arrived (11005)" }
    If ($Line.'DNSRegError' -eq "11006") { $Line.'DNSRegError' = "At least one path has arrived (11006)" }
    If ($Line.'DNSRegError' -eq "11007") { $Line.'DNSRegError' = "There are no senders (11007)" }
    If ($Line.'DNSRegError' -eq "11008") { $Line.'DNSRegError' = "There are no receivers (11008)" }
    If ($Line.'DNSRegError' -eq "11009") { $Line.'DNSRegError' = "Reserve has been confirmed (11009)" }
    If ($Line.'DNSRegError' -eq "11010") { $Line.'DNSRegError' = "Error due to lack of resources (11010)" }
    If ($Line.'DNSRegError' -eq "11011") { $Line.'DNSRegError' = "Rejected for administrative reasons - bad credentials (11011)" }
    If ($Line.'DNSRegError' -eq "11012") { $Line.'DNSRegError' = "Unknown or conflicting style (11012)" }
    If ($Line.'DNSRegError' -eq "11013") { $Line.'DNSRegError' = "Problem with some part of the filterspec or providerspecific buffer in general (11013)" }
    If ($Line.'DNSRegError' -eq "11014") { $Line.'DNSRegError' = "Problem with some part of the flowspec (11014)" }
    If ($Line.'DNSRegError' -eq "11015") { $Line.'DNSRegError' = "General QOS error (11015)" }
    If ($Line.'DNSRegError' -eq "11016") { $Line.'DNSRegError' = "An invalid or unrecognized service type was found in the flowspec (11016)" }
    If ($Line.'DNSRegError' -eq "11017") { $Line.'DNSRegError' = "An invalid or inconsistent flowspec was found in the QOS structure (11017)" }
    If ($Line.'DNSRegError' -eq "11018") { $Line.'DNSRegError' = "Invalid QOS provider-specific buffer (11018)" }
    If ($Line.'DNSRegError' -eq "11019") { $Line.'DNSRegError' = "An invalid QOS filter style was used (11019)" }
    If ($Line.'DNSRegError' -eq "11020") { $Line.'DNSRegError' = "An invalid QOS filter type was used (11020)" }
    If ($Line.'DNSRegError' -eq "11021") { $Line.'DNSRegError' = "An incorrect number of QOS FILTERSPECs were specified in the FLOWDESCRIPTOR (11021)" }
    If ($Line.'DNSRegError' -eq "11022") { $Line.'DNSRegError' = "An object with an invalid ObjectLength field was specified in the QOS provider-specific buffer (11022)" }
    If ($Line.'DNSRegError' -eq "11023") { $Line.'DNSRegError' = "An incorrect number of flow descriptors was specified in the QOS structure (11023)" }
    If ($Line.'DNSRegError' -eq "11024") { $Line.'DNSRegError' = "An unrecognized object was found in the QOS provider-specific buffer (11024)" }
    If ($Line.'DNSRegError' -eq "11025") { $Line.'DNSRegError' = "An invalid policy object was found in the QOS provider-specific buffer (11025)" }
    If ($Line.'DNSRegError' -eq "11026") { $Line.'DNSRegError' = "An invalid QOS flow descriptor was found in the flow descriptor list (11026)" }
    If ($Line.'DNSRegError' -eq "11027") { $Line.'DNSRegError' = "An invalid or inconsistent flowspec was found in the QOS provider specific buffer (11027)" }
    If ($Line.'DNSRegError' -eq "11028") { $Line.'DNSRegError' = "An invalid FILTERSPEC was found in the QOS provider-specific buffer (11028)" }
    If ($Line.'DNSRegError' -eq "11029") { $Line.'DNSRegError' = "An invalid shape discard mode object was found in the QOS provider specific buffer (11029)" }
    If ($Line.'DNSRegError' -eq "11030") { $Line.'DNSRegError' = "An invalid shaping rate object was found in the QOS provider-specific buffer (11030)" }
    If ($Line.'DNSRegError' -eq "11031") { $Line.'DNSRegError' = "A reserved policy element was found in the QOS provider-specific buffer (11031)" }
    If ($Line.'DNSRegError' -eq "11032") { $Line.'DNSRegError' = "No such host is known securely (11032)" }
    If ($Line.'DNSRegError' -eq "11033") { $Line.'DNSRegError' = "Name based IPSEC policy could not be added (11033)" }
}

$LogContent | Select "Host Name", @{Name = 'Date & Time'; Expression = {"$($_.'Date') $($_.'Time')"}}, @{Name = 'Description (ID)'; Expression = {"$($_.'Description') ($($_.'ID'))"}}, "IP Address", "MAC Address", "DNSRegError" | Sort 'Date & Time' -Descending  | Out-GridView -PassThru

# https://docs.microsoft.com/en-us/windows/desktop/debug/system-error-codes--9000-11999-